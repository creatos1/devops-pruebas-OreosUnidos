# .github/workflows/ci.yml

name: CI - Pruebas Automáticas

on: [push, pull_request]

jobs:
  # 1. Lint del código (Prioridad: Alta)
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Instalar flake8
        run: pip install flake8
      - name: Ejecutar linter en src/ y tests/
        run: flake8 src/ tests/

  # 2. Pruebas unitarias básicas / smoke tests (Prioridad: Alta)
  smoke-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest
      - name: Ejecutar smoke tests
        run: pytest tests/test_smoke.py -v

  # 3. Validación de archivos obligatorios (Prioridad: Media)
  validate-files:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Validar presencia y formato de archivos clave
        run: |
          # Lista de archivos obligatorios
          required_files=("README.md" "LICENSE" "CONTRIBUTING.md")
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Error: Falta el archivo obligatorio: $file"
              exit 1
            fi
          done

          # Validación básica del README.md
          if [ ! -s "README.md" ]; then
            echo "❌ Error: README.md está vacío"
            exit 1
          fi

          if ! grep -q "^#" README.md; then
            echo "❌ Error: README.md no contiene encabezados (formato inválido)"
            exit 1
          fi

          echo "✅ Todos los archivos obligatorios están presentes y bien formados."

  # 4. Pruebas unitarias y funcionales completas (tu job original)
  full-test:
    runs-on: ubuntu-latest
    env:
      FASTAPI_URL: http://localhost:8000
    steps:
      - uses: actions/checkout@v4
      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Instalar dependencias Python
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov httpx
      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Instalar Newman
        run: npm install -g newman
      - name: Levantar API (Uvicorn)
        run: |
          uvicorn src.main:app --host 0.0.0.0 --port 8000 &
          # Esperar a que la API esté lista
          for i in {1..15}; do
            if curl -s --fail "$FASTAPI_URL/" >/dev/null 2>&1; then
              echo "✅ API lista"
              break
            else
              echo "⏳ Esperando API... intento $i"
              sleep 2
            fi
          done
          if ! curl -s --fail "$FASTAPI_URL/" >/dev/null 2>&1; then
            echo "❌ ERROR: La API no respondió después de 30 segundos"
            exit 1
          fi
      - name: Ejecutar pruebas unitarias
        run: pytest tests/test_api.py --cov=src --cov-report=xml
      - name: Ejecutar pruebas funcionales
        run: |
          newman run tests/api/test_api.postman_collection.json \
            --reporters cli \
            --env-var "FASTAPI_URL=$FASTAPI_URL"
      - name: Guardar reporte de cobertura
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml